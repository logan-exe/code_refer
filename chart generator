from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import pandas as pd
import plotly.express as px
import plotly.io as pio
import sqlite3
import openai
import json

# Initialize FastAPI
app = FastAPI()

# Initialize OpenAI
openai.api_key = 'your_openai_api_key'  # Replace with your OpenAI API key

class ChartRequest(BaseModel):
    table_name: str
    user_prompt: str

def get_data_from_db(table_name: str):
    conn = sqlite3.connect('example.db')
    query = f"SELECT * FROM {table_name}"
    df = pd.read_sql_query(query, conn)
    conn.close()
    return df

def generate_chart_code(prompt: str):
    response = openai.Completion.create(
        engine="davinci-codex",
        prompt=prompt,
        max_tokens=200,
        temperature=0.5
    )
    return response.choices[0].text.strip()

@app.post("/generate_chart/")
async def generate_chart(request: ChartRequest):
    # Fetch data from the database
    try:
        df = get_data_from_db(request.table_name)
    except Exception as e:
        raise HTTPException(status_code=404, detail=f"Table {request.table_name} not found")

    # Prepare the context for OpenAI
    context = {
        "table_name": request.table_name,
        "columns": df.columns.tolist()
    }
    context_json = json.dumps(context)
    prompt = f"Context: {context_json}\n{request.user_prompt}"

    # Get the chart generation code from OpenAI
    chart_code = generate_chart_code(prompt)

    # Execute the chart code
    local_vars = {"pd": pd, "px": px, "df": df}
    exec(chart_code, {}, local_vars)
    fig = local_vars.get("fig")

    if fig is None:
        return {"error": "Failed to generate chart"}

    # Generate the HTML for the Plotly chart
    chart_html = pio.to_html(fig, full_html=False)

    return {"chart_html": chart_html}
